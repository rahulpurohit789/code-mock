{"ast":null,"code":"export const challenges = [{\n  id: 1,\n  title: \"Two Sum\",\n  difficulty: \"Easy\",\n  description: `Given an array of integers nums and an integer target, return indices of the two numbers in nums such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]`,\n  starterCode: {\n    python: `def twoSum(nums, target):\n    # Write your code here\n    pass\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget = 9\nprint(twoSum(nums, target))`,\n    javascript: `function twoSum(nums, target) {\n    // Write your code here\n}\n\n// Example usage:\nconst nums = [2, 7, 11, 15];\nconst target = 9;\nconsole.log(twoSum(nums, target));`,\n    java: `class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Write your code here\n        return new int[]{};\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums = {2, 7, 11, 15};\n        int target = 9;\n        int[] result = solution.twoSum(nums, target);\n        System.out.println(\"[\" + result[0] + \",\" + result[1] + \"]\");\n    }\n}`,\n    cpp: `#include <vector>\n#include <iostream>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        // Write your code here\n        return {};\n    }\n};\n\nint main() {\n    Solution solution;\n    std::vector<int> nums = {2, 7, 11, 15};\n    int target = 9;\n    std::vector<int> result = solution.twoSum(nums, target);\n    std::cout << \"[\" << result[0] << \",\" << result[1] << \"]\" << std::endl;\n    return 0;\n}`\n  },\n  testCases: [{\n    input: '[2,7,11,15], 9',\n    expectedOutput: '[0,1]'\n  }, {\n    input: '[3,2,4], 6',\n    expectedOutput: '[1,2]'\n  }, {\n    input: '[3,3], 6',\n    expectedOutput: '[0,1]'\n  }]\n}, {\n  id: 2,\n  title: \"Reverse String\",\n  difficulty: \"Easy\",\n  description: `Write a function that reverses a string. The input string is given as an array of characters s.\nYou must do this by modifying the input array in-place with O(1) extra memory.\n\nExample 1:\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n\nExample 2:\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]`,\n  starterCode: {\n    python: `def reverseString(s):\n    # Write your code here\n    pass\n\n# Example usage:\ns = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nreverseString(s)\nprint(s)`,\n    javascript: `function reverseString(s) {\n    // Write your code here\n}\n\n// Example usage:\nconst s = [\"h\",\"e\",\"l\",\"l\",\"o\"];\nreverseString(s);\nconsole.log(s);`,\n    java: `class Solution {\n    public void reverseString(char[] s) {\n        // Write your code here\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        char[] s = {'h','e','l','l','o'};\n        solution.reverseString(s);\n        System.out.println(new String(s));\n    }\n}`,\n    cpp: `#include <vector>\n#include <iostream>\n#include <string>\n\nclass Solution {\npublic:\n    void reverseString(std::vector<char>& s) {\n        // Write your code here\n    }\n};\n\nint main() {\n    Solution solution;\n    std::vector<char> s = {'h','e','l','l','o'};\n    solution.reverseString(s);\n    for (char c : s) std::cout << c;\n    std::cout << std::endl;\n    return 0;\n}`\n  },\n  testCases: [{\n    input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n    expectedOutput: '[\"o\",\"l\",\"l\",\"e\",\"h\"]'\n  }, {\n    input: '[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]',\n    expectedOutput: '[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]'\n  }]\n}];\nexport const getChallenge = id => {\n  return challenges.find(challenge => challenge.id === id);\n};","map":{"version":3,"names":["challenges","id","title","difficulty","description","starterCode","python","javascript","java","cpp","testCases","input","expectedOutput","getChallenge","find","challenge"],"sources":["C:/Users/ASUS/OneDrive/Desktop/Projects/AI Interviewer/frontend/src/data/mockChallenges.js"],"sourcesContent":["export const challenges = [\r\n  {\r\n    id: 1,\r\n    title: \"Two Sum\",\r\n    difficulty: \"Easy\",\r\n    description: `Given an array of integers nums and an integer target, return indices of the two numbers in nums such that they add up to target.\r\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\r\nYou can return the answer in any order.\r\n\r\nExample 1:\r\nInput: nums = [2,7,11,15], target = 9\r\nOutput: [0,1]\r\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\r\n\r\nExample 2:\r\nInput: nums = [3,2,4], target = 6\r\nOutput: [1,2]`,\r\n    starterCode: {\r\n      python: `def twoSum(nums, target):\r\n    # Write your code here\r\n    pass\r\n\r\n# Example usage:\r\nnums = [2, 7, 11, 15]\r\ntarget = 9\r\nprint(twoSum(nums, target))`,\r\n      javascript: `function twoSum(nums, target) {\r\n    // Write your code here\r\n}\r\n\r\n// Example usage:\r\nconst nums = [2, 7, 11, 15];\r\nconst target = 9;\r\nconsole.log(twoSum(nums, target));`,\r\n      java: `class Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        // Write your code here\r\n        return new int[]{};\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Solution solution = new Solution();\r\n        int[] nums = {2, 7, 11, 15};\r\n        int target = 9;\r\n        int[] result = solution.twoSum(nums, target);\r\n        System.out.println(\"[\" + result[0] + \",\" + result[1] + \"]\");\r\n    }\r\n}`,\r\n      cpp: `#include <vector>\r\n#include <iostream>\r\n\r\nclass Solution {\r\npublic:\r\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\r\n        // Write your code here\r\n        return {};\r\n    }\r\n};\r\n\r\nint main() {\r\n    Solution solution;\r\n    std::vector<int> nums = {2, 7, 11, 15};\r\n    int target = 9;\r\n    std::vector<int> result = solution.twoSum(nums, target);\r\n    std::cout << \"[\" << result[0] << \",\" << result[1] << \"]\" << std::endl;\r\n    return 0;\r\n}`\r\n    },\r\n    testCases: [\r\n      {\r\n        input: '[2,7,11,15], 9',\r\n        expectedOutput: '[0,1]'\r\n      },\r\n      {\r\n        input: '[3,2,4], 6',\r\n        expectedOutput: '[1,2]'\r\n      },\r\n      {\r\n        input: '[3,3], 6',\r\n        expectedOutput: '[0,1]'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Reverse String\",\r\n    difficulty: \"Easy\",\r\n    description: `Write a function that reverses a string. The input string is given as an array of characters s.\r\nYou must do this by modifying the input array in-place with O(1) extra memory.\r\n\r\nExample 1:\r\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\r\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\r\n\r\nExample 2:\r\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\r\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]`,\r\n    starterCode: {\r\n      python: `def reverseString(s):\r\n    # Write your code here\r\n    pass\r\n\r\n# Example usage:\r\ns = [\"h\",\"e\",\"l\",\"l\",\"o\"]\r\nreverseString(s)\r\nprint(s)`,\r\n      javascript: `function reverseString(s) {\r\n    // Write your code here\r\n}\r\n\r\n// Example usage:\r\nconst s = [\"h\",\"e\",\"l\",\"l\",\"o\"];\r\nreverseString(s);\r\nconsole.log(s);`,\r\n      java: `class Solution {\r\n    public void reverseString(char[] s) {\r\n        // Write your code here\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Solution solution = new Solution();\r\n        char[] s = {'h','e','l','l','o'};\r\n        solution.reverseString(s);\r\n        System.out.println(new String(s));\r\n    }\r\n}`,\r\n      cpp: `#include <vector>\r\n#include <iostream>\r\n#include <string>\r\n\r\nclass Solution {\r\npublic:\r\n    void reverseString(std::vector<char>& s) {\r\n        // Write your code here\r\n    }\r\n};\r\n\r\nint main() {\r\n    Solution solution;\r\n    std::vector<char> s = {'h','e','l','l','o'};\r\n    solution.reverseString(s);\r\n    for (char c : s) std::cout << c;\r\n    std::cout << std::endl;\r\n    return 0;\r\n}`\r\n    },\r\n    testCases: [\r\n      {\r\n        input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\r\n        expectedOutput: '[\"o\",\"l\",\"l\",\"e\",\"h\"]'\r\n      },\r\n      {\r\n        input: '[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]',\r\n        expectedOutput: '[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const getChallenge = (id) => {\r\n  return challenges.find(challenge => challenge.id === id);\r\n}; "],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,CACxB;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,SAAS;EAChBC,UAAU,EAAE,MAAM;EAClBC,WAAW,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;EACVC,WAAW,EAAE;IACXC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;IACtBC,UAAU,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;IAC7BC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IACIC,GAAG,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;EACDC,SAAS,EAAE,CACT;IACEC,KAAK,EAAE,gBAAgB;IACvBC,cAAc,EAAE;EAClB,CAAC,EACD;IACED,KAAK,EAAE,YAAY;IACnBC,cAAc,EAAE;EAClB,CAAC,EACD;IACED,KAAK,EAAE,UAAU;IACjBC,cAAc,EAAE;EAClB,CAAC;AAEL,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,gBAAgB;EACvBC,UAAU,EAAE,MAAM;EAClBC,WAAW,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;EAC9BC,WAAW,EAAE;IACXC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;IACHC,UAAU,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;IACVC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IACIC,GAAG,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;EACDC,SAAS,EAAE,CACT;IACEC,KAAK,EAAE,uBAAuB;IAC9BC,cAAc,EAAE;EAClB,CAAC,EACD;IACED,KAAK,EAAE,2BAA2B;IAClCC,cAAc,EAAE;EAClB,CAAC;AAEL,CAAC,CACF;AAED,OAAO,MAAMC,YAAY,GAAIZ,EAAE,IAAK;EAClC,OAAOD,UAAU,CAACc,IAAI,CAACC,SAAS,IAAIA,SAAS,CAACd,EAAE,KAAKA,EAAE,CAAC;AAC1D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}