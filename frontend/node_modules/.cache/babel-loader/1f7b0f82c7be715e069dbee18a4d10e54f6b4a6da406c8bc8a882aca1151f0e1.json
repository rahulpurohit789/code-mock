{"ast":null,"code":"// Pool of 50 DSA Problems for Code Mock Interview System\nconst dsaProblemsPool = [\n// ARRAYS (10 problems)\n{\n  \"id\": 1,\n  \"story\": \"You are working on a financial application that needs to find pairs of transactions.\",\n  \"problem\": \"Given an array of integers and a target sum, find two numbers in the array that add up to the target sum.\",\n  \"requirements\": [\"Return the indices of the two numbers that add up to the target\", \"Assume there is exactly one solution\", \"You may not use the same element twice\"],\n  \"parameterNames\": [\"nums\", \"target\"],\n  \"testCases\": [{\n    \"inputs\": [\"[2, 7, 11, 15]\", \"9\"],\n    \"output\": \"[0, 1]\",\n    \"explanation\": \"nums[0] + nums[1] = 2 + 7 = 9\"\n  }, {\n    \"inputs\": [\"[3, 2, 4]\", \"6\"],\n    \"output\": \"[1, 2]\",\n    \"explanation\": \"nums[1] + nums[2] = 2 + 4 = 6\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[1, 5, 8, 10, 13]\", \"18\"],\n    \"output\": \"[2, 4]\"\n  }, {\n    \"inputs\": [\"[0, 4, 3, 0]\", \"0\"],\n    \"output\": \"[0, 3]\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums, target):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums, target) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int[] solution(int[] nums, int target) {\\n        // Your code here\\n        return new int[2];\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    vector<int> solution(vector<int>& nums, int target) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\n  }\n}, {\n  \"id\": 2,\n  \"story\": \"You are analyzing stock prices to find the maximum profit from a single buy-sell transaction.\",\n  \"problem\": \"Given an array of stock prices, find the maximum profit you can achieve by buying and selling once.\",\n  \"requirements\": [\"You must buy before you sell\", \"Return the maximum profit possible\", \"If no profit is possible, return 0\"],\n  \"parameterNames\": [\"prices\"],\n  \"testCases\": [{\n    \"inputs\": [\"[7, 1, 5, 3, 6, 4]\"],\n    \"output\": \"5\",\n    \"explanation\": \"Buy at 1, sell at 6\"\n  }, {\n    \"inputs\": [\"[7, 6, 4, 3, 1]\"],\n    \"output\": \"0\",\n    \"explanation\": \"No profit possible\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[1, 2, 3, 4, 5]\"],\n    \"output\": \"4\"\n  }, {\n    \"inputs\": [\"[2, 4, 1]\"],\n    \"output\": \"2\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(prices):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(prices) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(int[] prices) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& prices) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 3,\n  \"story\": \"You are analyzing sensor data to find the segment with maximum sum reading.\",\n  \"problem\": \"Find the contiguous subarray with the largest sum and return its sum.\",\n  \"requirements\": [\"The subarray must be contiguous\", \"Return the maximum sum\", \"Handle negative numbers appropriately\"],\n  \"parameterNames\": [\"nums\"],\n  \"testCases\": [{\n    \"inputs\": [\"[-2, 1, -3, 4, -1, 2, 1, -5, 4]\"],\n    \"output\": \"6\",\n    \"explanation\": \"Subarray [4, -1, 2, 1] has sum 6\"\n  }, {\n    \"inputs\": [\"[1]\"],\n    \"output\": \"1\",\n    \"explanation\": \"Single element\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[5, 4, -1, 7, 8]\"],\n    \"output\": \"23\"\n  }, {\n    \"inputs\": [\"[-1, -2, -3]\"],\n    \"output\": \"-1\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(int[] nums) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 4,\n  \"story\": \"You are building a system to detect duplicate entries in a dataset.\",\n  \"problem\": \"Given an array of integers, return true if any value appears at least twice.\",\n  \"requirements\": [\"Return true if duplicates exist\", \"Return false if all elements are distinct\", \"Optimize for time complexity\"],\n  \"parameterNames\": [\"nums\"],\n  \"testCases\": [{\n    \"inputs\": [\"[1, 2, 3, 1]\"],\n    \"output\": \"true\",\n    \"explanation\": \"1 appears twice\"\n  }, {\n    \"inputs\": [\"[1, 2, 3, 4]\"],\n    \"output\": \"false\",\n    \"explanation\": \"All elements are distinct\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\"],\n    \"output\": \"true\"\n  }, {\n    \"inputs\": [\"[]\"],\n    \"output\": \"false\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public boolean solution(int[] nums) {\\n        // Your code here\\n        return false;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    bool solution(vector<int>& nums) {\\n        // Your code here\\n        return false;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 5,\n  \"story\": \"You are calculating profit margins where each product's margin depends on all other products.\",\n  \"problem\": \"Given an array, return an array where each element is the product of all other elements except itself.\",\n  \"requirements\": [\"Do not use division operation\", \"Solve in O(n) time\", \"The output array doesn't count as extra space\"],\n  \"parameterNames\": [\"nums\"],\n  \"testCases\": [{\n    \"inputs\": [\"[1, 2, 3, 4]\"],\n    \"output\": \"[24, 12, 8, 6]\",\n    \"explanation\": \"For index 0: 2*3*4=24\"\n  }, {\n    \"inputs\": [\"[-1, 1, 0, -3, 3]\"],\n    \"output\": \"[0, 0, 9, 0, 0]\",\n    \"explanation\": \"Zero makes most products zero\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[2, 3, 4, 5]\"],\n    \"output\": \"[60, 40, 30, 24]\"\n  }, {\n    \"inputs\": [\"[1, 0]\"],\n    \"output\": \"[0, 1]\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int[] solution(int[] nums) {\\n        // Your code here\\n        return new int[nums.length];\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    vector<int> solution(vector<int>& nums) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\n  }\n}, {\n  \"id\": 6,\n  \"story\": \"You are working with a sorted array that was rotated, and need to find the minimum element.\",\n  \"problem\": \"Find the minimum element in a rotated sorted array with unique elements.\",\n  \"requirements\": [\"The array was originally sorted in ascending order\", \"The array has been rotated between 1 and n times\", \"All elements are unique\"],\n  \"parameterNames\": [\"nums\"],\n  \"testCases\": [{\n    \"inputs\": [\"[3, 4, 5, 1, 2]\"],\n    \"output\": \"1\",\n    \"explanation\": \"Original array was [1,2,3,4,5] rotated 3 times\"\n  }, {\n    \"inputs\": [\"[4, 5, 6, 7, 0, 1, 2]\"],\n    \"output\": \"0\",\n    \"explanation\": \"Minimum is 0\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[11, 13, 15, 17]\"],\n    \"output\": \"11\"\n  }, {\n    \"inputs\": [\"[2, 1]\"],\n    \"output\": \"1\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(int[] nums) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 7,\n  \"story\": \"You are analyzing data points to find triplets that sum to zero for balance calculations.\",\n  \"problem\": \"Find all unique triplets in the array that sum to zero.\",\n  \"requirements\": [\"Return all unique triplets [a, b, c] where a + b + c = 0\", \"The solution set must not contain duplicate triplets\", \"Order of triplets and elements within triplets doesn't matter\"],\n  \"parameterNames\": [\"nums\"],\n  \"testCases\": [{\n    \"inputs\": [\"[-1, 0, 1, 2, -1, -4]\"],\n    \"output\": \"[[-1, -1, 2], [-1, 0, 1]]\",\n    \"explanation\": \"Two unique triplets sum to 0\"\n  }, {\n    \"inputs\": [\"[0, 1, 1]\"],\n    \"output\": \"[]\",\n    \"explanation\": \"No triplets sum to 0\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[0, 0, 0]\"],\n    \"output\": \"[[0, 0, 0]]\"\n  }, {\n    \"inputs\": [\"[-2, 0, 1, 1, 2]\"],\n    \"output\": \"[[-2, 0, 2], [-2, 1, 1]]\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public List<List<Integer>> solution(int[] nums) {\\n        // Your code here\\n        return new ArrayList<>();\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    vector<vector<int>> solution(vector<int>& nums) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\n  }\n}, {\n  \"id\": 8,\n  \"story\": \"You are designing a water container system with vertical lines as walls.\",\n  \"problem\": \"Find two lines that together with the x-axis form a container that holds the most water.\",\n  \"requirements\": [\"Return the maximum area of water that can be contained\", \"You cannot slant the container\", \"Use the two-pointer technique for efficiency\"],\n  \"parameterNames\": [\"height\"],\n  \"testCases\": [{\n    \"inputs\": [\"[1, 8, 6, 2, 5, 4, 8, 3, 7]\"],\n    \"output\": \"49\",\n    \"explanation\": \"Lines at index 1 and 8 with height 8 and 7\"\n  }, {\n    \"inputs\": [\"[1, 1]\"],\n    \"output\": \"1\",\n    \"explanation\": \"Only one possible container\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[1, 2, 1]\"],\n    \"output\": \"2\"\n  }, {\n    \"inputs\": [\"[1, 2, 4, 3]\"],\n    \"output\": \"4\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(height):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(height) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(int[] height) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& height) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 9,\n  \"story\": \"You are searching through a database that was sorted but then rotated due to system maintenance.\",\n  \"problem\": \"Search for a target value in a rotated sorted array. Return its index or -1 if not found.\",\n  \"requirements\": [\"The array was originally sorted in ascending order\", \"The array has been rotated at some pivot\", \"All values are unique\"],\n  \"parameterNames\": [\"nums\", \"target\"],\n  \"testCases\": [{\n    \"inputs\": [\"[4, 5, 6, 7, 0, 1, 2]\", \"0\"],\n    \"output\": \"4\",\n    \"explanation\": \"Target 0 is at index 4\"\n  }, {\n    \"inputs\": [\"[4, 5, 6, 7, 0, 1, 2]\", \"3\"],\n    \"output\": \"-1\",\n    \"explanation\": \"Target 3 is not in array\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[1]\", \"0\"],\n    \"output\": \"-1\"\n  }, {\n    \"inputs\": [\"[1, 3]\", \"3\"],\n    \"output\": \"1\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums, target):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums, target) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(int[] nums, int target) {\\n        // Your code here\\n        return -1;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums, int target) {\\n        // Your code here\\n        return -1;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 10,\n  \"story\": \"You are analyzing product performance data to find the segment with maximum product value.\",\n  \"problem\": \"Find the contiguous subarray with the largest product and return the product.\",\n  \"requirements\": [\"The subarray must be contiguous\", \"Handle both positive and negative numbers\", \"Consider that negative × negative = positive\"],\n  \"parameterNames\": [\"nums\"],\n  \"testCases\": [{\n    \"inputs\": [\"[2, 3, -2, 4]\"],\n    \"output\": \"6\",\n    \"explanation\": \"Subarray [2, 3] has product 6\"\n  }, {\n    \"inputs\": [\"[-2, 0, -1]\"],\n    \"output\": \"0\",\n    \"explanation\": \"0 is the maximum product\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[-2, 3, -4]\"],\n    \"output\": \"24\"\n  }, {\n    \"inputs\": [\"[0, 2]\"],\n    \"output\": \"2\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(int[] nums) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\n  }\n},\n// TWO POINTERS (5 problems)\n{\n  \"id\": 11,\n  \"story\": \"You are building a text validation system that checks if phrases read the same forwards and backwards.\",\n  \"problem\": \"Check if a string is a palindrome, considering only alphanumeric characters and ignoring case.\",\n  \"requirements\": [\"Only consider alphanumeric characters\", \"Ignore case differences\", \"Return true if it's a palindrome, false otherwise\"],\n  \"parameterNames\": [\"s\"],\n  \"testCases\": [{\n    \"inputs\": [\"\\\"A man, a plan, a canal: Panama\\\"\"],\n    \"output\": \"true\",\n    \"explanation\": \"Reads 'amanaplanacanalpanama' forwards and backwards\"\n  }, {\n    \"inputs\": [\"\\\"race a car\\\"\"],\n    \"output\": \"false\",\n    \"explanation\": \"Reads 'raceacar' which is not a palindrome\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"\\\" \\\"\"],\n    \"output\": \"true\"\n  }, {\n    \"inputs\": [\"\\\"a.\\\"\"],\n    \"output\": \"true\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(s):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(s) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public boolean solution(String s) {\\n        // Your code here\\n        return false;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    bool solution(string s) {\\n        // Your code here\\n        return false;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 12,\n  \"story\": \"You have a sorted array of numbers and need to find two numbers that add up to a specific target.\",\n  \"problem\": \"Find two numbers in a sorted array that add up to a target. Return their 1-indexed positions.\",\n  \"requirements\": [\"The array is sorted in ascending order\", \"There is exactly one solution\", \"Return 1-indexed positions, not 0-indexed\"],\n  \"parameterNames\": [\"numbers\", \"target\"],\n  \"testCases\": [{\n    \"inputs\": [\"[2, 7, 11, 15]\", \"9\"],\n    \"output\": \"[1, 2]\",\n    \"explanation\": \"numbers[0] + numbers[1] = 2 + 7 = 9\"\n  }, {\n    \"inputs\": [\"[2, 3, 4]\", \"6\"],\n    \"output\": \"[1, 3]\",\n    \"explanation\": \"numbers[0] + numbers[2] = 2 + 4 = 6\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[-1, 0]\", \"-1\"],\n    \"output\": \"[1, 2]\"\n  }, {\n    \"inputs\": [\"[1, 2, 3, 4, 4, 9, 56, 90]\", \"8\"],\n    \"output\": \"[4, 5]\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(numbers, target):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(numbers, target) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int[] solution(int[] numbers, int target) {\\n        // Your code here\\n        return new int[2];\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    vector<int> solution(vector<int>& numbers, int target) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\n  }\n}, {\n  \"id\": 13,\n  \"story\": \"You are cleaning up a sorted dataset by removing duplicate entries in-place.\",\n  \"problem\": \"Remove duplicates from a sorted array in-place and return the number of unique elements.\",\n  \"requirements\": [\"Modify the array in-place\", \"Return the number of unique elements\", \"The relative order of elements should be kept the same\"],\n  \"parameterNames\": [\"nums\"],\n  \"testCases\": [{\n    \"inputs\": [\"[1, 1, 2]\"],\n    \"output\": \"2\",\n    \"explanation\": \"First 2 elements become [1, 2]\"\n  }, {\n    \"inputs\": [\"[0, 0, 1, 1, 1, 2, 2, 3, 3, 4]\"],\n    \"output\": \"5\",\n    \"explanation\": \"First 5 elements become [0, 1, 2, 3, 4]\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[1, 2, 3]\"],\n    \"output\": \"3\"\n  }, {\n    \"inputs\": [\"[1, 1, 1, 1]\"],\n    \"output\": \"1\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(int[] nums) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 14,\n  \"story\": \"You are organizing data where zeros represent missing values that should be moved to the end.\",\n  \"problem\": \"Move all zeros in an array to the end while maintaining the relative order of non-zero elements.\",\n  \"requirements\": [\"Modify the array in-place\", \"Maintain relative order of non-zero elements\", \"All zeros should be at the end\"],\n  \"parameterNames\": [\"nums\"],\n  \"testCases\": [{\n    \"inputs\": [\"[0, 1, 0, 3, 12]\"],\n    \"output\": \"[1, 3, 12, 0, 0]\",\n    \"explanation\": \"Non-zeros moved to front, zeros to end\"\n  }, {\n    \"inputs\": [\"[0]\"],\n    \"output\": \"[0]\",\n    \"explanation\": \"Single zero remains\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[1, 2, 3]\"],\n    \"output\": \"[1, 2, 3]\"\n  }, {\n    \"inputs\": [\"[0, 0, 1]\"],\n    \"output\": \"[1, 0, 0]\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public void solution(int[] nums) {\\n        // Your code here\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    void solution(vector<int>& nums) {\\n        // Your code here\\n    }\\n};\"\n  }\n}, {\n  \"id\": 15,\n  \"story\": \"You are calculating how much rainwater can be trapped between buildings of different heights.\",\n  \"problem\": \"Calculate how much water can be trapped after raining given the height of bars.\",\n  \"requirements\": [\"Water can only be trapped between higher bars\", \"Return the total volume of trapped water\", \"Consider that water flows to lower areas\"],\n  \"parameterNames\": [\"height\"],\n  \"testCases\": [{\n    \"inputs\": [\"[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\"],\n    \"output\": \"6\",\n    \"explanation\": \"6 units of water can be trapped\"\n  }, {\n    \"inputs\": [\"[4, 2, 0, 3, 2, 5]\"],\n    \"output\": \"9\",\n    \"explanation\": \"9 units of water can be trapped\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[3, 0, 2, 0, 4]\"],\n    \"output\": \"7\"\n  }, {\n    \"inputs\": [\"[1, 2, 3]\"],\n    \"output\": \"0\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(height):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(height) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(int[] height) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& height) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\n  }\n},\n// STRINGS (8 problems)\n{\n  \"id\": 16,\n  \"story\": \"You are building a word game that needs to check if two words are anagrams of each other.\",\n  \"problem\": \"Determine if two strings are anagrams (contain the same characters with the same frequency).\",\n  \"requirements\": [\"Return true if the strings are anagrams\", \"Consider character frequency, not just presence\", \"Case sensitive comparison\"],\n  \"parameterNames\": [\"s\", \"t\"],\n  \"testCases\": [{\n    \"inputs\": [\"\\\"anagram\\\"\", \"\\\"nagaram\\\"\"],\n    \"output\": \"true\",\n    \"explanation\": \"Both contain same characters with same frequency\"\n  }, {\n    \"inputs\": [\"\\\"rat\\\"\", \"\\\"car\\\"\"],\n    \"output\": \"false\",\n    \"explanation\": \"Different characters\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"\\\"listen\\\"\", \"\\\"silent\\\"\"],\n    \"output\": \"true\"\n  }, {\n    \"inputs\": [\"\\\"hello\\\"\", \"\\\"bello\\\"\"],\n    \"output\": \"false\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(s, t):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(s, t) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public boolean solution(String s, String t) {\\n        // Your code here\\n        return false;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    bool solution(string s, string t) {\\n        // Your code here\\n        return false;\\n    }\\n};\"\n  }\n}, {\n  \"id\": 17,\n  \"story\": \"You are organizing a dictionary where words that are anagrams should be grouped together.\",\n  \"problem\": \"Group strings that are anagrams of each other together.\",\n  \"requirements\": [\"Return a list of groups where each group contains anagrams\", \"The order of groups and words within groups doesn't matter\", \"Handle empty strings appropriately\"],\n  \"parameterNames\": [\"strs\"],\n  \"testCases\": [{\n    \"inputs\": [\"[\\\"eat\\\", \\\"tea\\\", \\\"tan\\\", \\\"ate\\\", \\\"nat\\\", \\\"bat\\\"]\"],\n    \"output\": \"[[\\\"bat\\\"], [\\\"nat\\\", \\\"tan\\\"], [\\\"ate\\\", \\\"eat\\\", \\\"tea\\\"]]\",\n    \"explanation\": \"Words grouped by anagram pattern\"\n  }, {\n    \"inputs\": [\"[\\\"\\\"]\"],\n    \"output\": \"[[\\\"\\\"]]\",\n    \"explanation\": \"Single empty string\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"[\\\"a\\\"]\"],\n    \"output\": \"[[\\\"a\\\"]]\"\n  }, {\n    \"inputs\": [\"[\\\"ab\\\", \\\"ba\\\", \\\"abc\\\", \\\"bca\\\"]\"],\n    \"output\": \"[[\\\"ab\\\", \\\"ba\\\"], [\\\"abc\\\", \\\"bca\\\"]]\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(strs):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(strs) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public List<List<String>> solution(String[] strs) {\\n        // Your code here\\n        return new ArrayList<>();\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    vector<vector<string>> solution(vector<string>& strs) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\n  }\n}, {\n  \"id\": 18,\n  \"story\": \"You are analyzing text patterns to find the longest sequence without repeated characters.\",\n  \"problem\": \"Find the length of the longest substring without repeating characters.\",\n  \"requirements\": [\"Return the length of the longest valid substring\", \"A substring is a contiguous sequence of characters\", \"No character should repeat within the substring\"],\n  \"parameterNames\": [\"s\"],\n  \"testCases\": [{\n    \"inputs\": [\"\\\"abcabcbb\\\"\"],\n    \"output\": \"3\",\n    \"explanation\": \"Longest substring is 'abc' with length 3\"\n  }, {\n    \"inputs\": [\"\\\"bbbbb\\\"\"],\n    \"output\": \"1\",\n    \"explanation\": \"Longest substring is 'b' with length 1\"\n  }],\n  \"hiddenTestCases\": [{\n    \"inputs\": [\"\\\"pwwkew\\\"\"],\n    \"output\": \"3\"\n  }, {\n    \"inputs\": [\"\\\"\\\"\"],\n    \"output\": \"0\"\n  }],\n  \"skeletonCode\": {\n    \"python\": \"def solution(s):\\n    # Your code here\\n    pass\",\n    \"javascript\": \"function solution(s) {\\n    // Your code here\\n}\",\n    \"java\": \"class Solution {\\n    public int solution(String s) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\n    \"cpp\": \"class Solution {\\npublic:\\n    int solution(string s) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\n  }\n}];\nexport { dsaProblemsPool };\nexport default dsaProblemsPool;","map":{"version":3,"names":["dsaProblemsPool"],"sources":["C:/Users/ASUS/OneDrive/Desktop/Projects/AI Interviewer/frontend/src/data/questionsPool.js"],"sourcesContent":["// Pool of 50 DSA Problems for Code Mock Interview System\r\nconst dsaProblemsPool = [\r\n  // ARRAYS (10 problems)\r\n  {\r\n    \"id\": 1,\r\n    \"story\": \"You are working on a financial application that needs to find pairs of transactions.\",\r\n    \"problem\": \"Given an array of integers and a target sum, find two numbers in the array that add up to the target sum.\",\r\n    \"requirements\": [\r\n      \"Return the indices of the two numbers that add up to the target\",\r\n      \"Assume there is exactly one solution\",\r\n      \"You may not use the same element twice\"\r\n    ],\r\n    \"parameterNames\": [\"nums\", \"target\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[2, 7, 11, 15]\", \"9\"], \"output\": \"[0, 1]\", \"explanation\": \"nums[0] + nums[1] = 2 + 7 = 9\" },\r\n      { \"inputs\": [\"[3, 2, 4]\", \"6\"], \"output\": \"[1, 2]\", \"explanation\": \"nums[1] + nums[2] = 2 + 4 = 6\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[1, 5, 8, 10, 13]\", \"18\"], \"output\": \"[2, 4]\" },\r\n      { \"inputs\": [\"[0, 4, 3, 0]\", \"0\"], \"output\": \"[0, 3]\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums, target):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums, target) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int[] solution(int[] nums, int target) {\\n        // Your code here\\n        return new int[2];\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    vector<int> solution(vector<int>& nums, int target) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"story\": \"You are analyzing stock prices to find the maximum profit from a single buy-sell transaction.\",\r\n    \"problem\": \"Given an array of stock prices, find the maximum profit you can achieve by buying and selling once.\",\r\n    \"requirements\": [\r\n      \"You must buy before you sell\",\r\n      \"Return the maximum profit possible\",\r\n      \"If no profit is possible, return 0\"\r\n    ],\r\n    \"parameterNames\": [\"prices\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[7, 1, 5, 3, 6, 4]\"], \"output\": \"5\", \"explanation\": \"Buy at 1, sell at 6\" },\r\n      { \"inputs\": [\"[7, 6, 4, 3, 1]\"], \"output\": \"0\", \"explanation\": \"No profit possible\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[1, 2, 3, 4, 5]\"], \"output\": \"4\" },\r\n      { \"inputs\": [\"[2, 4, 1]\"], \"output\": \"2\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(prices):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(prices) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(int[] prices) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& prices) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"story\": \"You are analyzing sensor data to find the segment with maximum sum reading.\",\r\n    \"problem\": \"Find the contiguous subarray with the largest sum and return its sum.\",\r\n    \"requirements\": [\r\n      \"The subarray must be contiguous\",\r\n      \"Return the maximum sum\",\r\n      \"Handle negative numbers appropriately\"\r\n    ],\r\n    \"parameterNames\": [\"nums\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[-2, 1, -3, 4, -1, 2, 1, -5, 4]\"], \"output\": \"6\", \"explanation\": \"Subarray [4, -1, 2, 1] has sum 6\" },\r\n      { \"inputs\": [\"[1]\"], \"output\": \"1\", \"explanation\": \"Single element\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[5, 4, -1, 7, 8]\"], \"output\": \"23\" },\r\n      { \"inputs\": [\"[-1, -2, -3]\"], \"output\": \"-1\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(int[] nums) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 4,\r\n    \"story\": \"You are building a system to detect duplicate entries in a dataset.\",\r\n    \"problem\": \"Given an array of integers, return true if any value appears at least twice.\",\r\n    \"requirements\": [\r\n      \"Return true if duplicates exist\",\r\n      \"Return false if all elements are distinct\",\r\n      \"Optimize for time complexity\"\r\n    ],\r\n    \"parameterNames\": [\"nums\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[1, 2, 3, 1]\"], \"output\": \"true\", \"explanation\": \"1 appears twice\" },\r\n      { \"inputs\": [\"[1, 2, 3, 4]\"], \"output\": \"false\", \"explanation\": \"All elements are distinct\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[1, 1, 1, 3, 3, 4, 3, 2, 4, 2]\"], \"output\": \"true\" },\r\n      { \"inputs\": [\"[]\"], \"output\": \"false\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public boolean solution(int[] nums) {\\n        // Your code here\\n        return false;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    bool solution(vector<int>& nums) {\\n        // Your code here\\n        return false;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 5,\r\n    \"story\": \"You are calculating profit margins where each product's margin depends on all other products.\",\r\n    \"problem\": \"Given an array, return an array where each element is the product of all other elements except itself.\",\r\n    \"requirements\": [\r\n      \"Do not use division operation\",\r\n      \"Solve in O(n) time\",\r\n      \"The output array doesn't count as extra space\"\r\n    ],\r\n    \"parameterNames\": [\"nums\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[1, 2, 3, 4]\"], \"output\": \"[24, 12, 8, 6]\", \"explanation\": \"For index 0: 2*3*4=24\" },\r\n      { \"inputs\": [\"[-1, 1, 0, -3, 3]\"], \"output\": \"[0, 0, 9, 0, 0]\", \"explanation\": \"Zero makes most products zero\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[2, 3, 4, 5]\"], \"output\": \"[60, 40, 30, 24]\" },\r\n      { \"inputs\": [\"[1, 0]\"], \"output\": \"[0, 1]\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int[] solution(int[] nums) {\\n        // Your code here\\n        return new int[nums.length];\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    vector<int> solution(vector<int>& nums) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 6,\r\n    \"story\": \"You are working with a sorted array that was rotated, and need to find the minimum element.\",\r\n    \"problem\": \"Find the minimum element in a rotated sorted array with unique elements.\",\r\n    \"requirements\": [\r\n      \"The array was originally sorted in ascending order\",\r\n      \"The array has been rotated between 1 and n times\",\r\n      \"All elements are unique\"\r\n    ],\r\n    \"parameterNames\": [\"nums\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[3, 4, 5, 1, 2]\"], \"output\": \"1\", \"explanation\": \"Original array was [1,2,3,4,5] rotated 3 times\" },\r\n      { \"inputs\": [\"[4, 5, 6, 7, 0, 1, 2]\"], \"output\": \"0\", \"explanation\": \"Minimum is 0\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[11, 13, 15, 17]\"], \"output\": \"11\" },\r\n      { \"inputs\": [\"[2, 1]\"], \"output\": \"1\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(int[] nums) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 7,\r\n    \"story\": \"You are analyzing data points to find triplets that sum to zero for balance calculations.\",\r\n    \"problem\": \"Find all unique triplets in the array that sum to zero.\",\r\n    \"requirements\": [\r\n      \"Return all unique triplets [a, b, c] where a + b + c = 0\",\r\n      \"The solution set must not contain duplicate triplets\",\r\n      \"Order of triplets and elements within triplets doesn't matter\"\r\n    ],\r\n    \"parameterNames\": [\"nums\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[-1, 0, 1, 2, -1, -4]\"], \"output\": \"[[-1, -1, 2], [-1, 0, 1]]\", \"explanation\": \"Two unique triplets sum to 0\" },\r\n      { \"inputs\": [\"[0, 1, 1]\"], \"output\": \"[]\", \"explanation\": \"No triplets sum to 0\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[0, 0, 0]\"], \"output\": \"[[0, 0, 0]]\" },\r\n      { \"inputs\": [\"[-2, 0, 1, 1, 2]\"], \"output\": \"[[-2, 0, 2], [-2, 1, 1]]\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public List<List<Integer>> solution(int[] nums) {\\n        // Your code here\\n        return new ArrayList<>();\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    vector<vector<int>> solution(vector<int>& nums) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 8,\r\n    \"story\": \"You are designing a water container system with vertical lines as walls.\",\r\n    \"problem\": \"Find two lines that together with the x-axis form a container that holds the most water.\",\r\n    \"requirements\": [\r\n      \"Return the maximum area of water that can be contained\",\r\n      \"You cannot slant the container\",\r\n      \"Use the two-pointer technique for efficiency\"\r\n    ],\r\n    \"parameterNames\": [\"height\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[1, 8, 6, 2, 5, 4, 8, 3, 7]\"], \"output\": \"49\", \"explanation\": \"Lines at index 1 and 8 with height 8 and 7\" },\r\n      { \"inputs\": [\"[1, 1]\"], \"output\": \"1\", \"explanation\": \"Only one possible container\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[1, 2, 1]\"], \"output\": \"2\" },\r\n      { \"inputs\": [\"[1, 2, 4, 3]\"], \"output\": \"4\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(height):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(height) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(int[] height) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& height) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 9,\r\n    \"story\": \"You are searching through a database that was sorted but then rotated due to system maintenance.\",\r\n    \"problem\": \"Search for a target value in a rotated sorted array. Return its index or -1 if not found.\",\r\n    \"requirements\": [\r\n      \"The array was originally sorted in ascending order\",\r\n      \"The array has been rotated at some pivot\",\r\n      \"All values are unique\"\r\n    ],\r\n    \"parameterNames\": [\"nums\", \"target\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[4, 5, 6, 7, 0, 1, 2]\", \"0\"], \"output\": \"4\", \"explanation\": \"Target 0 is at index 4\" },\r\n      { \"inputs\": [\"[4, 5, 6, 7, 0, 1, 2]\", \"3\"], \"output\": \"-1\", \"explanation\": \"Target 3 is not in array\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[1]\", \"0\"], \"output\": \"-1\" },\r\n      { \"inputs\": [\"[1, 3]\", \"3\"], \"output\": \"1\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums, target):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums, target) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(int[] nums, int target) {\\n        // Your code here\\n        return -1;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums, int target) {\\n        // Your code here\\n        return -1;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 10,\r\n    \"story\": \"You are analyzing product performance data to find the segment with maximum product value.\",\r\n    \"problem\": \"Find the contiguous subarray with the largest product and return the product.\",\r\n    \"requirements\": [\r\n      \"The subarray must be contiguous\",\r\n      \"Handle both positive and negative numbers\",\r\n      \"Consider that negative × negative = positive\"\r\n    ],\r\n    \"parameterNames\": [\"nums\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[2, 3, -2, 4]\"], \"output\": \"6\", \"explanation\": \"Subarray [2, 3] has product 6\" },\r\n      { \"inputs\": [\"[-2, 0, -1]\"], \"output\": \"0\", \"explanation\": \"0 is the maximum product\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[-2, 3, -4]\"], \"output\": \"24\" },\r\n      { \"inputs\": [\"[0, 2]\"], \"output\": \"2\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(int[] nums) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\r\n    }\r\n  },\r\n\r\n  // TWO POINTERS (5 problems)\r\n  {\r\n    \"id\": 11,\r\n    \"story\": \"You are building a text validation system that checks if phrases read the same forwards and backwards.\",\r\n    \"problem\": \"Check if a string is a palindrome, considering only alphanumeric characters and ignoring case.\",\r\n    \"requirements\": [\r\n      \"Only consider alphanumeric characters\",\r\n      \"Ignore case differences\",\r\n      \"Return true if it's a palindrome, false otherwise\"\r\n    ],\r\n    \"parameterNames\": [\"s\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"\\\"A man, a plan, a canal: Panama\\\"\"], \"output\": \"true\", \"explanation\": \"Reads 'amanaplanacanalpanama' forwards and backwards\" },\r\n      { \"inputs\": [\"\\\"race a car\\\"\"], \"output\": \"false\", \"explanation\": \"Reads 'raceacar' which is not a palindrome\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"\\\" \\\"\"], \"output\": \"true\" },\r\n      { \"inputs\": [\"\\\"a.\\\"\"], \"output\": \"true\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(s):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(s) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public boolean solution(String s) {\\n        // Your code here\\n        return false;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    bool solution(string s) {\\n        // Your code here\\n        return false;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 12,\r\n    \"story\": \"You have a sorted array of numbers and need to find two numbers that add up to a specific target.\",\r\n    \"problem\": \"Find two numbers in a sorted array that add up to a target. Return their 1-indexed positions.\",\r\n    \"requirements\": [\r\n      \"The array is sorted in ascending order\",\r\n      \"There is exactly one solution\",\r\n      \"Return 1-indexed positions, not 0-indexed\"\r\n    ],\r\n    \"parameterNames\": [\"numbers\", \"target\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[2, 7, 11, 15]\", \"9\"], \"output\": \"[1, 2]\", \"explanation\": \"numbers[0] + numbers[1] = 2 + 7 = 9\" },\r\n      { \"inputs\": [\"[2, 3, 4]\", \"6\"], \"output\": \"[1, 3]\", \"explanation\": \"numbers[0] + numbers[2] = 2 + 4 = 6\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[-1, 0]\", \"-1\"], \"output\": \"[1, 2]\" },\r\n      { \"inputs\": [\"[1, 2, 3, 4, 4, 9, 56, 90]\", \"8\"], \"output\": \"[4, 5]\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(numbers, target):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(numbers, target) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int[] solution(int[] numbers, int target) {\\n        // Your code here\\n        return new int[2];\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    vector<int> solution(vector<int>& numbers, int target) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 13,\r\n    \"story\": \"You are cleaning up a sorted dataset by removing duplicate entries in-place.\",\r\n    \"problem\": \"Remove duplicates from a sorted array in-place and return the number of unique elements.\",\r\n    \"requirements\": [\r\n      \"Modify the array in-place\",\r\n      \"Return the number of unique elements\",\r\n      \"The relative order of elements should be kept the same\"\r\n    ],\r\n    \"parameterNames\": [\"nums\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[1, 1, 2]\"], \"output\": \"2\", \"explanation\": \"First 2 elements become [1, 2]\" },\r\n      { \"inputs\": [\"[0, 0, 1, 1, 1, 2, 2, 3, 3, 4]\"], \"output\": \"5\", \"explanation\": \"First 5 elements become [0, 1, 2, 3, 4]\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[1, 2, 3]\"], \"output\": \"3\" },\r\n      { \"inputs\": [\"[1, 1, 1, 1]\"], \"output\": \"1\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(int[] nums) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& nums) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 14,\r\n    \"story\": \"You are organizing data where zeros represent missing values that should be moved to the end.\",\r\n    \"problem\": \"Move all zeros in an array to the end while maintaining the relative order of non-zero elements.\",\r\n    \"requirements\": [\r\n      \"Modify the array in-place\",\r\n      \"Maintain relative order of non-zero elements\",\r\n      \"All zeros should be at the end\"\r\n    ],\r\n    \"parameterNames\": [\"nums\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[0, 1, 0, 3, 12]\"], \"output\": \"[1, 3, 12, 0, 0]\", \"explanation\": \"Non-zeros moved to front, zeros to end\" },\r\n      { \"inputs\": [\"[0]\"], \"output\": \"[0]\", \"explanation\": \"Single zero remains\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[1, 2, 3]\"], \"output\": \"[1, 2, 3]\" },\r\n      { \"inputs\": [\"[0, 0, 1]\"], \"output\": \"[1, 0, 0]\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(nums):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(nums) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public void solution(int[] nums) {\\n        // Your code here\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    void solution(vector<int>& nums) {\\n        // Your code here\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 15,\r\n    \"story\": \"You are calculating how much rainwater can be trapped between buildings of different heights.\",\r\n    \"problem\": \"Calculate how much water can be trapped after raining given the height of bars.\",\r\n    \"requirements\": [\r\n      \"Water can only be trapped between higher bars\",\r\n      \"Return the total volume of trapped water\",\r\n      \"Consider that water flows to lower areas\"\r\n    ],\r\n    \"parameterNames\": [\"height\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\"], \"output\": \"6\", \"explanation\": \"6 units of water can be trapped\" },\r\n      { \"inputs\": [\"[4, 2, 0, 3, 2, 5]\"], \"output\": \"9\", \"explanation\": \"9 units of water can be trapped\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[3, 0, 2, 0, 4]\"], \"output\": \"7\" },\r\n      { \"inputs\": [\"[1, 2, 3]\"], \"output\": \"0\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(height):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(height) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(int[] height) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(vector<int>& height) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\r\n    }\r\n  },\r\n\r\n  // STRINGS (8 problems)\r\n  {\r\n    \"id\": 16,\r\n    \"story\": \"You are building a word game that needs to check if two words are anagrams of each other.\",\r\n    \"problem\": \"Determine if two strings are anagrams (contain the same characters with the same frequency).\",\r\n    \"requirements\": [\r\n      \"Return true if the strings are anagrams\",\r\n      \"Consider character frequency, not just presence\",\r\n      \"Case sensitive comparison\"\r\n    ],\r\n    \"parameterNames\": [\"s\", \"t\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"\\\"anagram\\\"\", \"\\\"nagaram\\\"\"], \"output\": \"true\", \"explanation\": \"Both contain same characters with same frequency\" },\r\n      { \"inputs\": [\"\\\"rat\\\"\", \"\\\"car\\\"\"], \"output\": \"false\", \"explanation\": \"Different characters\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"\\\"listen\\\"\", \"\\\"silent\\\"\"], \"output\": \"true\" },\r\n      { \"inputs\": [\"\\\"hello\\\"\", \"\\\"bello\\\"\"], \"output\": \"false\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(s, t):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(s, t) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public boolean solution(String s, String t) {\\n        // Your code here\\n        return false;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    bool solution(string s, string t) {\\n        // Your code here\\n        return false;\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 17,\r\n    \"story\": \"You are organizing a dictionary where words that are anagrams should be grouped together.\",\r\n    \"problem\": \"Group strings that are anagrams of each other together.\",\r\n    \"requirements\": [\r\n      \"Return a list of groups where each group contains anagrams\",\r\n      \"The order of groups and words within groups doesn't matter\",\r\n      \"Handle empty strings appropriately\"\r\n    ],\r\n    \"parameterNames\": [\"strs\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"[\\\"eat\\\", \\\"tea\\\", \\\"tan\\\", \\\"ate\\\", \\\"nat\\\", \\\"bat\\\"]\"], \"output\": \"[[\\\"bat\\\"], [\\\"nat\\\", \\\"tan\\\"], [\\\"ate\\\", \\\"eat\\\", \\\"tea\\\"]]\", \"explanation\": \"Words grouped by anagram pattern\" },\r\n      { \"inputs\": [\"[\\\"\\\"]\"], \"output\": \"[[\\\"\\\"]]\", \"explanation\": \"Single empty string\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"[\\\"a\\\"]\"], \"output\": \"[[\\\"a\\\"]]\" },\r\n      { \"inputs\": [\"[\\\"ab\\\", \\\"ba\\\", \\\"abc\\\", \\\"bca\\\"]\"], \"output\": \"[[\\\"ab\\\", \\\"ba\\\"], [\\\"abc\\\", \\\"bca\\\"]]\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(strs):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(strs) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public List<List<String>> solution(String[] strs) {\\n        // Your code here\\n        return new ArrayList<>();\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    vector<vector<string>> solution(vector<string>& strs) {\\n        // Your code here\\n        return {};\\n    }\\n};\"\r\n    }\r\n  },\r\n  {\r\n    \"id\": 18,\r\n    \"story\": \"You are analyzing text patterns to find the longest sequence without repeated characters.\",\r\n    \"problem\": \"Find the length of the longest substring without repeating characters.\",\r\n    \"requirements\": [\r\n      \"Return the length of the longest valid substring\",\r\n      \"A substring is a contiguous sequence of characters\",\r\n      \"No character should repeat within the substring\"\r\n    ],\r\n    \"parameterNames\": [\"s\"],\r\n    \"testCases\": [\r\n      { \"inputs\": [\"\\\"abcabcbb\\\"\"], \"output\": \"3\", \"explanation\": \"Longest substring is 'abc' with length 3\" },\r\n      { \"inputs\": [\"\\\"bbbbb\\\"\"], \"output\": \"1\", \"explanation\": \"Longest substring is 'b' with length 1\" }\r\n    ],\r\n    \"hiddenTestCases\": [\r\n      { \"inputs\": [\"\\\"pwwkew\\\"\"], \"output\": \"3\" },\r\n      { \"inputs\": [\"\\\"\\\"\"], \"output\": \"0\" }\r\n    ],\r\n    \"skeletonCode\": {\r\n      \"python\": \"def solution(s):\\n    # Your code here\\n    pass\",\r\n      \"javascript\": \"function solution(s) {\\n    // Your code here\\n}\",\r\n      \"java\": \"class Solution {\\n    public int solution(String s) {\\n        // Your code here\\n        return 0;\\n    }\\n}\",\r\n      \"cpp\": \"class Solution {\\npublic:\\n    int solution(string s) {\\n        // Your code here\\n        return 0;\\n    }\\n};\"\r\n    }\r\n  }\r\n]\r\n\r\nexport { dsaProblemsPool };\r\nexport default dsaProblemsPool;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}